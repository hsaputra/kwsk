dist: trusty
sudo: required
services: docker

language: go

env:
  global:
  - IMAGE_PREFIX="projectodd"
  - IMAGE_TAG="travis-latest"
  - IMAGE_PUSH="true"
  - secure: "e4aawjgWuRHEEQ5a5jGU7bxxZY3En4iycJ/0IcOKwAxIc5Kb01NvHpkDDJjALSP6rSBJqhZKHoLyZmhcC1wQ8uRxPrPGIRU2PM++bCHY5XpPm2WwMIj9IJ3Mus34tmGfuQGoreYgSywb3P8GrKpNwIe+SHlC5JuMh38siHCa0gtDOPsWuf1iwaY7Wu8GNRgeV7i6jXbDHoe2R5XfjyKIevMNTPiTCSOjecylPPal+H7G3EP7PaHB6IJEgEtgzCnDtvBeVz8Bo49pttBDU8LnDUhEbJsGaFD4rYm1Gp6JlRcTwLPHnoWoHYanju6S5u4IR1rs3R1YSAgnNsyOHk9FrzKJVZ6Rsh8l+kXk2ZqcLZrKM1+JWUiFRrfEzIwysO2Qpo1zAqLu2t9m86hvVZYMReT/Q7ZBGKacWZ8rHvBKk+EDwnJvsktmH8U4gSrMStv9sIb+pzfXME/mCFLCJNz5uExXTuKsP0v6bMckfnqhT9bv2kbUbcoNKD1GIA7PiR245ZB4tN9Nlrd8FbGA6wuLhNY4kySjHxYUumFUqzpWImfrxIXSiZegb8UG/6hMuX31dM5zKM8VhVJTflIHaRthmQTQ3gO+NiQxPXCQrjfKA7wOlZ+6Xrz8CsyZZj60ylfvRyMgcPpbNSNBmgNCKuNFE30M4+4AqzAIdIwUOJgkRPg="
  - secure: "fhSKJD+lwHta+KVBtCUYdydlftZL/0WB+vLRNk5YR5SvuftW8Au4VKtSGNHALMQkYmgQXO/Jt6Am0B3RhqNPEiUDifRscUs6DQ4e7qzadXhw+E1oVthYR//698i1EBevE02hmL23OV5NTwKs7lIDWnvvcGxnmTLe4nhYJ65N9GoCea1ryNtqMHLa9kCLYDLZPAOD51afHYsAho9HExC/hzzQdml7lcT9vw9Gm0djmdH2JfKMgBTNwpyQ+sLRMQunlVu8c2QMzS0D3Padwu6KHscfYcxMjMX4UTiQ4yywPSf55QmsXWSoWu3wU537qgfF14zNNAfHKMRN/yx+qLZuoSeUuFPapX5+X/JutWrHqBrqeLNUe5AuG8nhbH+q+V3XONcDxAA8SZNHWkLiymti23RvBxuP1eWQRhKew5Avh2Fyz8WrM4snyBc74108XTWEFWYjnj2Ua/kHNL2MumZl7za4AcNJvcgCspkBVddQ63K/qH0xpydJPV1Ek41FOTRKKK+owdH6rt2XNvZ//idWNunHVIMY+x8em7cSQNQoEMKxM3Jzf8plR7yVJI9J6K6H7CqyNvKYDKLlM/sukJ+dZzJhmge0gvCqrV78qeOT+lT5vkSjijBDURtfHLlUOgPSbCm9Ys0NfOWdFnqvmuPx+N4y2OXP1PdPl159eI7bI94="

before_install:
- sudo apt-get update -qq
- curl -L -s https://github.com/golang/dep/releases/download/v0.4.1/dep-linux-amd64 -o $GOPATH/bin/dep
- chmod +x $GOPATH/bin/dep
# Fetch go deps
- dep ensure

install:
# Make root mounted as rshared to fix kube-dns issues.
- sudo mount --make-rshared /
# Download kubeadm-dind-cluster script
- curl -Lo dind-cluster.sh https://cdn.rawgit.com/kubernetes-sigs/kubeadm-dind-cluster/master/fixed/dind-cluster-v1.10.sh && chmod +x dind-cluster.sh && sudo mv dind-cluster.sh /usr/local/bin/
# Tell kubeadm-dind-cluster where to put kubectl
- export KUBECTL_DIR="${HOME}/.kubeadm-dind-cluster"
# Add Kubectl directory to the PATH.
- export PATH="${KUBECTL_DIR}:$PATH"
# Start Kubernetes
- ./test/bin/kubeadm-dind-start.sh
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
# Install and configure knative
- ./test/bin/knative-install.sh

script:
- ./test/bin/integs.sh

after_failure:
- echo "************* FAILURE *************"
- cat kwsk.log
- kubectl get all --all-namespaces -o wide

jobs:
  include:
  - stage: build images
    install: skip
    script: ./test/bin/build-images.sh
    after_failure: skip
  - stage: test
    env: TESTS="system.basic.WskAction*"
    script: ./test/bin/integs.sh
  - stage: test
    env: TESTS="system.basic.WskRest*"
    script: ./test/bin/integs.sh
  # Only after tests pass do we rebuild and publish the images under
  # the latest tag, and only for the runtime-shim branch
  - stage: publish images
    env: IMAGE_TAG="latest"
    install: skip
    script: ./test/bin/build-images.sh
    after_failure: skip
    if: branch = runtime-shim
  allow_failures:
    - env: TESTS="system.basic.WskRest*"
