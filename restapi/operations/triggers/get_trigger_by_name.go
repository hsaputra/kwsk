// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTriggerByNameHandlerFunc turns a function with the right signature into a get trigger by name handler
type GetTriggerByNameHandlerFunc func(GetTriggerByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTriggerByNameHandlerFunc) Handle(params GetTriggerByNameParams) middleware.Responder {
	return fn(params)
}

// GetTriggerByNameHandler interface for that can handle valid get trigger by name params
type GetTriggerByNameHandler interface {
	Handle(GetTriggerByNameParams) middleware.Responder
}

// NewGetTriggerByName creates a new http.Handler for the get trigger by name operation
func NewGetTriggerByName(ctx *middleware.Context, handler GetTriggerByNameHandler) *GetTriggerByName {
	return &GetTriggerByName{Context: ctx, Handler: handler}
}

/*GetTriggerByName swagger:route GET /namespaces/{namespace}/triggers/{triggerName} Triggers getTriggerByName

Get trigger information

Get trigger information

*/
type GetTriggerByName struct {
	Context *middleware.Context
	Handler GetTriggerByNameHandler
}

func (o *GetTriggerByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTriggerByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
