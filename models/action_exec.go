// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionExec definition of the action, such as javascript code or the name of a container
// swagger:model ActionExec
type ActionExec struct {

	// Whether the action has a binary attachment or not
	Binary bool `json:"binary,omitempty"`

	// The code to execute when kind is not 'blackbox'
	Code string `json:"code,omitempty"`

	// For sequence actions, the individual action components
	Components []string `json:"components"`

	// container image name when kind is 'blackbox'
	Image string `json:"image,omitempty"`

	// optional zipfile reference when code kind is 'nodejs'
	Init string `json:"init,omitempty"`

	// the type of action
	// Enum: [nodejs:6 nodejs:8 nodejs:default python:2 python:3 python:default php:7.1 php:7.2 swift:3.1.1 swift:4.1 java java:default blackbox sequence]
	Kind string `json:"kind,omitempty"`

	// main entrypoint of the action code
	Main string `json:"main,omitempty"`
}

// Validate validates this action exec
func (m *ActionExec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var actionExecTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nodejs:6","nodejs:8","nodejs:default","python:2","python:3","python:default","php:7.1","php:7.2","swift:3.1.1","swift:4.1","java","java:default","blackbox","sequence"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionExecTypeKindPropEnum = append(actionExecTypeKindPropEnum, v)
	}
}

const (

	// ActionExecKindNodejs6 captures enum value "nodejs:6"
	ActionExecKindNodejs6 string = "nodejs:6"

	// ActionExecKindNodejs8 captures enum value "nodejs:8"
	ActionExecKindNodejs8 string = "nodejs:8"

	// ActionExecKindNodejsDefault captures enum value "nodejs:default"
	ActionExecKindNodejsDefault string = "nodejs:default"

	// ActionExecKindPython2 captures enum value "python:2"
	ActionExecKindPython2 string = "python:2"

	// ActionExecKindPython3 captures enum value "python:3"
	ActionExecKindPython3 string = "python:3"

	// ActionExecKindPythonDefault captures enum value "python:default"
	ActionExecKindPythonDefault string = "python:default"

	// ActionExecKindPhp71 captures enum value "php:7.1"
	ActionExecKindPhp71 string = "php:7.1"

	// ActionExecKindPhp72 captures enum value "php:7.2"
	ActionExecKindPhp72 string = "php:7.2"

	// ActionExecKindSwift311 captures enum value "swift:3.1.1"
	ActionExecKindSwift311 string = "swift:3.1.1"

	// ActionExecKindSwift41 captures enum value "swift:4.1"
	ActionExecKindSwift41 string = "swift:4.1"

	// ActionExecKindJava captures enum value "java"
	ActionExecKindJava string = "java"

	// ActionExecKindJavaDefault captures enum value "java:default"
	ActionExecKindJavaDefault string = "java:default"

	// ActionExecKindBlackbox captures enum value "blackbox"
	ActionExecKindBlackbox string = "blackbox"

	// ActionExecKindSequence captures enum value "sequence"
	ActionExecKindSequence string = "sequence"
)

// prop value enum
func (m *ActionExec) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, actionExecTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ActionExec) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionExec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionExec) UnmarshalBinary(b []byte) error {
	var res ActionExec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
